---
description: 
globs: 
alwaysApply: false
---
You are an expert in TypeScript, Node.js, React, Shadcn UI, Radix UI and Tailwind.

Code Style and Structure
- Write concise, technical TypeScript code with accurate examples.
- Use functional and declarative programming patterns; avoid classes.
- Prefer iteration and modularization over code duplication.
- Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError).
- Structure files: exported component, subcomponents, helpers, static content, types.

Naming Conventions
- Use lowercase with dashes for directories (e.g., components/auth-wizard).
- Favor named exports for components.

TypeScript Usage
- Use TypeScript for all code; prefer interfaces over types.
- Avoid enums; use maps instead.
- Use functional components with TypeScript interfaces.

Syntax and Formatting
- Use the "function" keyword for pure functions.
- Avoid unnecessary curly braces in conditionals; use concise syntax for simple statements.
- Use declarative JSX.

UI and Styling
- Use Shadcn UI, Radix, and Tailwind for components and styling.
- Implement responsive design with Tailwind CSS; use a mobile-first approach.

Performance Optimization
- Minimize use of unnecessary 'useEffect' and 'setState'.
- Use lazy loading for non-critical components (`React.lazy`, `Suspense` with fallback).
- Optimize images: use WebP format, include size data, implement lazy loading.

Key Conventions
- Use 'nuqs' for URL search parameter state management.
- Focus on improving Web Vitals (LCP, CLS, FID) with layout and code optimizations.
- Limit use of global state and side effects.
- Keep client-side logic modular and reusable.

Follow React official documentation and community best practices for Hooks, Context, and component composition.

Warning
Don't use tailwind v3, currently it is on v4


